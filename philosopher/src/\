/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lgracia- <lgracia-@student.42barcel>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/07 11:55:41 by lgracia-          #+#    #+#             */
/*   Updated: 2025/01/15 12:03:34 by lgracia-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../philo.h"

int	ft_isdigit(int c)
{
	if (c > 47 && c < 58)
		return (0);
	else
		return (1);
}

int	ft_atoi(const char *nptr)
{
	int	i;
	int	ptr;
	int	sign;

	i = 0;
	ptr = 0;
	sign = 1;
	while (nptr[i] <= '9' && nptr[i] >= '0')
	{
		ptr = nptr[i] - '0' + (10 * ptr);
		i++;
	}
	ptr *= sign;
	return (ptr);
}

int	ft_isint(char *s)
{
	int	i;

	i = 0;
	while (s[i])
	{
		if (ft_isdigit(s[i++]) != 0)
			return (1);
	}
	return (0);
}

int	main(int argc, char **argv)
{
	env_t	lst;
	int		i;

	if (argc > 5)
		return (printf("To many arguments\n"), 1);
	if (argc < 4)
		return (printf("Arguments missing\n"), 1);
	i = 0;
	while (++i < argc)
	{
		if (ft_isint(argv[i]) != 0)
			return (printf("Enter digits\n"), 1);
		if (ft_atoi(argv[i]) < 1)
			return (printf("Argument is too low\n"), 1);
	}
	i = 0;
	if (pthread_mutex_init(&lst.mutex, NULL) != 0)
		return (1);
	lst.death = 0;
	if (pthread_mutex_lock(&lst.mutex) != 0)
		return (1);
	lst.philo = create_philo(ft_atoi(argv[1]), &lst);
	if (lst.philo == 0)
		return (1);
	env.time = milisec(0);
	gettimeofday(&lst.tv, NULL);
	if (pthread_mutex_unlock(&lst.mutex) != 0)
		return (1);
	pthread_mutex_destroy(&lst.mutex);
	return (0);
}
